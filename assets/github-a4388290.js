const $="https://api.github.com",E=async s=>{console.log(`üöÄ Starting real data fetch for: ${s}`);try{if(!G(s))throw console.error("‚ùå Username validation failed"),new Error("Invalid GitHub username format");console.log("‚úÖ Username format is valid"),console.log("üë§ Verifying user exists...");const e=await I(s);console.log(`‚úÖ User verified: ${e.username} (${e.publicRepos} public repos)`),console.log("üìä Attempting to fetch contribution graph data...");const t=await x(s);if(!t||t.length===0)throw console.error("‚ùå No contribution data returned from any method"),new Error("No contribution data returned from any method");const n=t.flat().reduce((o,r)=>o+r.count,0);return console.log(`üéØ Successfully fetched ${t.length} weeks of real contribution data`),console.log(`üìà Total contributions found: ${n}`),t.length>0&&t[0].length>0&&console.log("üìÖ Sample contribution data:",t[0][0]),t}catch(e){throw console.error("‚ùå Real data fetch failed:",e.message),console.error("‚ùå Full error:",e),e}},x=async s=>{console.log(`üîç Fetching REAL GitHub contribution data for: ${s}`);let e=null;try{console.log("üì° Trying real GitHub contribution SVG method...");const t=await D(s);if(t&&t.length>0){const n=t.flat().reduce((o,r)=>o+r.count,0);return console.log(`‚úÖ Successfully fetched REAL GitHub contribution data (${n} contributions)`),t}}catch(t){console.warn("‚ùå Real GitHub SVG method failed:",t.message),e=t}try{console.log("üì° Trying GitHub Activity Feed method...");const t=await A(s);if(t&&t.length>0){const n=t.flat().reduce((o,r)=>o+r.count,0);if(n>0)return console.log(`‚úÖ Successfully fetched real contribution data from Activity Feed (${n} contributions)`),t;console.warn("‚ö†Ô∏è Activity Feed returned data but no contributions found")}}catch(t){console.warn("‚ùå Activity Feed method failed:",t.message),e=t}try{console.log("üì° Trying working CORS proxy...");const t=await k(s);if(t&&t.length>0){const n=t.flat().reduce((o,r)=>o+r.count,0);return console.log(`‚úÖ Successfully fetched real contribution data via proxy (${n} contributions)`),t}}catch(t){console.warn("‚ùå CORS proxy method failed:",t.message),e=t}try{console.log("üì° Trying repository-based contribution estimation...");const t=await C(s);if(t&&t.length>0){const n=t.flat().reduce((o,r)=>o+r.count,0);return console.log(`‚úÖ Generated contribution estimates from repositories (${n} estimated contributions)`),t}}catch(t){console.warn("‚ùå Repository estimation method failed:",t.message),e=t}throw new Error(`Unable to fetch real contribution data for ${s}. All methods failed. Last error: ${(e==null?void 0:e.message)||"Unknown error"}`)},v=s=>{try{console.log("üîç Parsing contribution HTML...");const t=new DOMParser().parseFromString(s,"text/html"),n=["rect[data-date]",".ContributionCalendar-day[data-date]","rect[data-count]",".js-calendar-graph-svg rect","td[data-date]",".day[data-date]"];let o=null,r=null;for(const c of n)if(o=t.querySelectorAll(c),o.length>0){console.log(`‚úÖ Found ${o.length} contribution days using selector: ${c}`),r=c;break}else console.log(`‚ùå No elements found for selector: ${c}`);if(!o||o.length===0){console.log("üîç Searching for contribution-related content...");const c=s.includes("contributions")||s.includes("contribution");console.log(`Has contribution text: ${c}`);const d=t.querySelectorAll("svg");console.log(`Found ${d.length} SVG elements`);const g=t.querySelectorAll("rect");throw console.log(`Found ${g.length} rect elements total`),c?new Error(`No contribution data elements found with any known selector. Found ${g.length} rect elements total.`):new Error("No contribution-related content found in HTML")}const a=[];let l=[],i=0,u=0;if(o.forEach((c,d)=>{const g=c.getAttribute("data-date")||c.getAttribute("date")||c.getAttribute("data-day"),p=parseInt(c.getAttribute("data-level")||c.getAttribute("data-contribution-level")||c.getAttribute("level")||"0"),b=parseInt(c.getAttribute("data-count")||c.getAttribute("data-contribution-count")||c.getAttribute("count")||"0");if(!g){console.warn(`Skipping day ${d} - no date found (attributes: ${Array.from(c.attributes).map(w=>`${w.name}="${w.value}"`).join(", ")})`);return}u++;const f={date:g,count:isNaN(b)?0:b,level:isNaN(p)?b>0?Math.min(4,Math.ceil(b/2)):0:Math.min(4,Math.max(0,p)),weekIndex:Math.floor(u/7),dayIndex:(u-1)%7};l.push(f),l.length===7&&(a.push(l),l=[],i++)}),l.length>0&&a.push(l),a.length===0)throw new Error("No valid contribution weeks found");const h=a.flat().reduce((c,d)=>c+d.count,0);return console.log(`‚úÖ Successfully parsed ${a.length} weeks of contribution data`),console.log(`üìä Total contributions: ${h}`),console.log(`üìÖ Date range: ${a[0][0].date} to ${a[a.length-1][a[a.length-1].length-1].date}`),a}catch(e){throw console.error("‚ùå Error parsing contribution HTML:",e),e}},A=async s=>{try{const e=await fetch(`https://github.com/${s}.atom`,{headers:{Accept:"application/atom+xml, application/xml, text/xml"}});if(!e.ok)throw new Error(`GitHub Atom feed error: ${e.status}`);const t=await e.text();console.log(`üì∞ Fetched activity feed for ${s}`);const r=new DOMParser().parseFromString(t,"text/xml").querySelectorAll("entry");console.log(`üìä Found ${r.length} activity entries`);const a=new Date,l=new Date(a.getFullYear()-1,a.getMonth(),a.getDate()),i=new Map;for(let u=new Date(l);u<=a;u.setDate(u.getDate()+1)){const h=u.toISOString().split("T")[0];i.set(h,{count:0,level:0})}return r.forEach(u=>{const h=u.querySelector("published");if(h){const c=new Date(h.textContent).toISOString().split("T")[0],d=i.get(c)||{count:0,level:0};d.count+=1,d.count>=8?d.level=4:d.count>=4?d.level=3:d.count>=2?d.level=2:d.count>=1&&(d.level=1),i.set(c,d)}}),y(i,l,a)}catch(e){throw new Error(`Activity feed method failed: ${e.message}`)}},D=async s=>{try{console.log("üì° Trying GitHub Contributions API...");const t=await fetch(`https://github-contributions-api.jogruber.de/v4/${s}?y=last`);if(t.ok){const n=await t.json();if(console.log("üìä GitHub Contributions API returned data:",n),n.contributions)return S(n)}}catch(t){console.warn("‚ùå GitHub Contributions API failed:",t.message)}const e=[`https://api.allorigins.win/get?url=${encodeURIComponent(`https://github.com/users/${s}/contributions`)}`,`https://corsproxy.io/?https://github.com/users/${s}/contributions`,`https://cors-anywhere.herokuapp.com/https://github.com/users/${s}/contributions`];for(const t of e)try{console.log("üì° Trying to fetch GitHub contributions via proxy...");const n=await fetch(t,{headers:{Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}});if(!n.ok)continue;let o=await n.text();if(t.includes("allorigins"))try{o=JSON.parse(o).contents}catch{continue}if(console.log(`üìÑ Fetched GitHub page (${o.length} characters)`),o.includes("js-calendar-graph")||o.includes("ContributionCalendar")){const r=M(o);if(r&&r.length>0)return console.log("‚úÖ Successfully parsed real GitHub contribution data"),r}}catch(n){console.warn(`‚ùå Proxy ${t.split("?")[0]} failed:`,n.message)}throw new Error("Unable to fetch real GitHub contribution SVG")},S=s=>{try{if(console.log("üîç Parsing GitHub Contributions API response..."),!s.contributions||!Array.isArray(s.contributions))throw new Error("Invalid API response format");const e=new Map;if(s.contributions.forEach(n=>{const o=n.date,r=parseInt(n.count)||0,a=Math.min(4,Math.max(0,n.level||Math.ceil(r/2)));o&&e.set(o,{date:o,count:r,level:a})}),e.size===0)throw new Error("No contribution data found in API response");const t=Array.from(e.values()).reduce((n,o)=>n+o.count,0);return console.log(`üìä Parsed ${e.size} days, ${t} total contributions`),m(e)}catch(e){throw console.error("‚ùå Error parsing contribution API response:",e),e}},M=s=>{try{console.log("üîç Parsing real GitHub contribution HTML...");const t=new DOMParser().parseFromString(s,"text/html"),n=[".ContributionCalendar-day[data-date][data-level]","rect[data-date][data-level]",".js-calendar-graph-svg rect[data-date]","td.ContributionCalendar-day[data-date]","[data-date][data-count]"];let o=null;for(const a of n)if(o=t.querySelectorAll(a),o.length>0){console.log(`‚úÖ Found ${o.length} contribution elements with selector: ${a}`);break}if(!o||o.length===0)throw new Error("No GitHub contribution elements found in HTML");const r=new Map;if(Array.from(o).forEach(a=>{const l=a.getAttribute("data-date"),i=parseInt(a.getAttribute("data-level")||"0"),u=parseInt(a.getAttribute("data-count")||i||"0");l&&r.set(l,{date:l,count:Math.max(u,i),level:Math.min(4,Math.max(0,i))})}),r.size===0)throw new Error("No valid contribution data extracted");return m(r)}catch(e){throw console.error("‚ùå Error parsing GitHub contribution HTML:",e),e}},m=s=>{const e=Array.from(s.keys()).sort();if(e.length===0)return[];const t=new Date(e[0]),n=new Date(e[e.length-1]),o=new Date(t);o.setDate(t.getDate()-t.getDay());const r=[];let a=[];for(let i=new Date(o);i<=n;i.setDate(i.getDate()+1)){const u=i.toISOString().split("T")[0],h=s.get(u)||{date:u,count:0,level:0};a.push({...h,weekIndex:r.length,dayIndex:a.length}),i.getDay()===6&&(r.push(a),a=[])}a.length>0&&r.push(a),console.log(`üìÖ Generated ${r.length} weeks from real GitHub data`);const l=r.flat().reduce((i,u)=>i+u.count,0);return console.log(`üìä Total real contributions: ${l}`),r},k=async s=>{const e=[`https://api.allorigins.win/get?url=${encodeURIComponent(`https://github.com/users/${s}/contributions`)}`,`https://corsproxy.io/?https://github.com/users/${s}/contributions`,`https://cors-anywhere.herokuapp.com/https://github.com/users/${s}/contributions`];for(const t of e)try{console.log(`üì° Trying proxy: ${t.split("?")[0]}...`);const n=await fetch(t,{headers:{Accept:"text/html,application/xhtml+xml"}});if(!n.ok){console.warn(`‚ùå Proxy failed with status: ${n.status}`);continue}let o=await n.text();if(t.includes("allorigins")&&(o=JSON.parse(o).contents),console.log(`üìÑ Fetched contribution page HTML (${o.length} characters)`),!o.includes("contribution")&&!o.includes("GitHub")){console.warn("‚ùå Response doesn't appear to be GitHub contribution page");continue}const r=v(o);if(r&&r.length>0)return console.log("‚úÖ Successfully parsed contribution data via proxy"),r}catch(n){console.warn(`‚ùå Proxy error: ${n.message}`);continue}throw new Error("All CORS proxy methods failed")},C=async s=>{try{const e=await fetch(`https://api.github.com/users/${s}/repos?per_page=100&sort=updated`);if(!e.ok)throw new Error(`Repositories API error: ${e.status}`);const t=await e.json();console.log(`üìö Found ${t.length} repositories`);const n=new Date,o=new Date(n.getFullYear()-1,n.getMonth(),n.getDate()),r=new Map;for(let a=new Date(o);a<=n;a.setDate(a.getDate()+1)){const l=a.toISOString().split("T")[0];r.set(l,{count:0,level:0})}for(const a of t.slice(0,20))try{const l=await fetch(`https://api.github.com/repos/${s}/${a.name}/commits?author=${s}&since=${o.toISOString()}&per_page=100`);if(l.ok){const i=await l.json();console.log(`üìù Found ${i.length} commits in ${a.name}`),i.forEach(u=>{if(u.commit&&u.commit.author&&u.commit.author.date){const h=u.commit.author.date.split("T")[0],c=r.get(h)||{count:0,level:0};c.count+=1,c.count>=20?c.level=4:c.count>=10?c.level=3:c.count>=5?c.level=2:c.count>=1&&(c.level=1),r.set(h,c)}})}await new Promise(i=>setTimeout(i,100))}catch(l){console.warn(`Failed to fetch commits for ${a.name}:`,l.message)}return y(r,o,n)}catch(e){throw new Error(`Repository-based method failed: ${e.message}`)}},y=(s,e,t)=>{const n=[];let o=[];const r=new Date(e);r.setDate(e.getDate()-e.getDay());for(let a=new Date(r);a<=t;a.setDate(a.getDate()+1)){const l=a.toISOString().split("T")[0],i=s.get(l)||{count:0,level:0};o.push({date:l,count:i.count,level:i.level,weekIndex:n.length,dayIndex:o.length}),(a.getDay()===6||o.length===7)&&o.length===7&&(n.push(o),o=[])}return o.length>0&&n.push(o),console.log(`üìÖ Generated ${n.length} weeks of contribution data`),n},T=(s="demo-user",e=Math.random)=>{const t=[],n=new Date,o=new Date(n.getFullYear(),0,1);for(let r=0;r<53;r++){const a=[];for(let l=0;l<7;l++){const i=new Date(o);i.setDate(o.getDate()+r*7+l);let u=0;const h=i.getDay(),c=h===0||h===6,d=(i.getMonth()+1)/12,g=c?.3:1,p=Math.sin(d*Math.PI*2-Math.PI/2)*.3+.7;e()>.6&&(u=Math.floor((e()*15+1)*g*p));let f=0;u>0&&(u>=20?f=4:u>=10?f=3:u>=5?f=2:f=1),a.push({date:i.toISOString().split("T")[0],count:u,level:f,weekIndex:r,dayIndex:l})}t.push(a)}return t},I=async s=>{try{const e=await fetch(`${$}/users/${s}`);if(!e.ok)throw new Error(`GitHub API error: ${e.status}`);const t=await e.json();return{username:t.login,name:t.name,avatar:t.avatar_url,bio:t.bio,location:t.location,company:t.company,publicRepos:t.public_repos,followers:t.followers,following:t.following,createdAt:t.created_at,url:t.html_url}}catch(e){throw console.error("Error fetching user profile:",e),e}},G=s=>/^[a-zA-Z0-9]([a-zA-Z0-9-]){0,37}[a-zA-Z0-9]$|^[a-zA-Z0-9]$/.test(s),F=s=>{let e=0,t=0,n=0,o=0,r=0,a=0;const l=s.flat();l.forEach((i,u)=>{e+=i.count,i.count>0?(a++,n=Math.max(n,i.count)):(r=Math.max(r,a),a=0)}),s.forEach(i=>{i.some(u=>u.count>0)&&t++});for(let i=l.length-1;i>=0&&l[i].count>0;i--)o++;return r=Math.max(r,a),{totalContributions:e,activeWeeks:t,maxDayContributions:n,currentStreak:o,longestStreak:r,averagePerWeek:Math.round(e/s.length),weeklyActivity:t/s.length*100}},P=(s,e="sequential")=>{const t=s.flat().filter(n=>n.count>0);switch(e){case"random":return H([...t]);case"chronological":return t.sort((n,o)=>new Date(n.date)-new Date(o.date));case"sequential":default:return t}},H=s=>{const e=[...s];for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}return e};export{F as calculateContributionStats,E as fetchContributionData,I as fetchUserProfile,P as formatContributionDataForAnimation,T as generateMockContributionData,G as validateUsername};
